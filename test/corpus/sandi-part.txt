================================================================================
Real Cabal file - (simplified) sandi
================================================================================

cabal-version:      1.12

-- This file has been generated from package.yaml by hpack version 0.31.1.
--
-- see: https://github.com/sol/hpack
--
-- hash: 6183f2dd5fde1b5f89e8c5599ef0b4457280d17a3b0126ef21c0f541cc780473

name:               sandi
version:            0.5
x-revision:         1
synopsis:           Data encoding library
description:        Reasonably fast data encoding library.
category:           Codec, Conduit
maintainer:         Magnus Therning <magnus@therning.org>
license:            BSD3
license-file:       LICENSE
build-type:         Simple
extra-source-files:
  csrc/codec.h
  package.yaml

source-repository head
  type:     git
  location: https://github.com/magthe/sandi.git

flag with-conduit
  manual:  True
  default: True

library
  exposed-modules:
    Codec.Binary.Base16
    Codec.Binary.Base32
    Codec.Binary.Base32Hex
    Codec.Binary.Base64
    Codec.Binary.Base64Url
    Codec.Binary.Base85
    Codec.Binary.QuotedPrintable
    Codec.Binary.Uu
    Codec.Binary.Xx
    Codec.Binary.Yenc

  other-modules:    Paths_sandi
  hs-source-dirs:   src
  cc-options:       -fPIC -Wall -Wextra
  c-sources:        csrc/codec.c
  build-depends:
      base        <5
    , bytestring

  default-language: Haskell2010

test-suite sandi-tests
  type:             exitcode-stdio-1.0
  main-is:          Main.hs
  other-modules:
    Codec.Binary.Base16Test
    Codec.Binary.Base32HexTest
    Codec.Binary.Base32Test
    Codec.Binary.Base64Test
    Codec.Binary.Base64UrlTest
    Codec.Binary.Base85Test
    Codec.Binary.QuotedPrintableTest
    Codec.Binary.UuTest
    Codec.Binary.XxTest
    Codec.Binary.YencTest
    Codec.TestUtils
    Paths_sandi

  hs-source-dirs:   test-src
  build-depends:
      base
    , bytestring
    , sandi
    , tasty
    , tasty-hunit
    , tasty-quickcheck
    , tasty-th

  default-language: Haskell2010

benchmark sandi-bench
  type:             exitcode-stdio-1.0
  main-is:          Main.hs
  other-modules:
    Codec.Binary.Base16Bench
    Codec.Binary.Base32Bench
    Codec.Binary.Base32HexBench
    Codec.Binary.Base64Bench
    Codec.Binary.Base64UrlBench
    Codec.Binary.Base85Bench
    Codec.Binary.QuotedPrintableBench
    Codec.Binary.UuBench
    Codec.Binary.XxBench
    Codec.Binary.YencBench
    Paths_sandi

  hs-source-dirs:   bench-src
  build-depends:
      base
    , bytestring
    , criterion
    , sandi

  default-language: Haskell2010

--------------------------------------------------------------------------------

(cabal
  (cabal_version
    (spec_version))
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (properties
    (prop
      (field_name)
      (field_value))
    (prop
      (field_name)
      (field_value))
    (prop
      (field_name)
      (field_value))
    (prop
      (field_name)
      (field_value))
    (prop
      (field_name)
      (field_value))
    (prop
      (field_name)
      (field_value))
    (prop
      (field_name)
      (field_value))
    (prop
      (field_name)
      (field_value))
    (prop
      (field_name)
      (field_value))
    (prop
      (field_name)
      (field_value))
    (prop
      (field_name)
      (field_value)
      (indent)
      (field_value)
      (dedent)))
  (pkg_sections
    (sec_source_repository
      (sec_src_name)
      (indent)
      (sec_src_field
        (sec_src_field_name)
        (sec_src_field_value))
      (sec_src_field
        (sec_src_field_name)
        (sec_src_field_value))
      (dedent)))
  (pkg_sections
    (sec_flag
      (sec_fl_name)
      (indent)
      (sec_fl_field
        (sec_fl_field_name)
        (sec_fl_field_value))
      (sec_fl_field
        (sec_fl_field_name)
        (sec_fl_field_value))
      (dedent)))
  (pkg_sections
    (sec_library
      (indent)
      (sec_lib_field
        (sec_lib_field_name)
        (sec_lib_field_value)
        (indent)
        (sec_lib_field_value)
        (indented)
        (sec_lib_field_value)
        (indented)
        (sec_lib_field_value)
        (indented)
        (sec_lib_field_value)
        (indented)
        (sec_lib_field_value)
        (indented)
        (sec_lib_field_value)
        (indented)
        (sec_lib_field_value)
        (indented)
        (sec_lib_field_value)
        (indented)
        (sec_lib_field_value)
        (dedent))
      (sec_lib_field
        (sec_lib_field_name)
        (sec_lib_field_value))
      (sec_lib_field
        (sec_lib_field_name)
        (sec_lib_field_value))
      (sec_lib_field
        (sec_lib_field_name)
        (sec_lib_field_value))
      (sec_lib_field
        (sec_lib_field_name)
        (sec_lib_field_value))
      (sec_lib_field
        (sec_lib_field_name)
        (sec_lib_field_value)
        (indent)
        (sec_lib_field_value)
        (dedent))
      (sec_lib_field
        (sec_lib_field_name)
        (sec_lib_field_value))
      (dedent)))
  (pkg_sections
    (sec_test_suite
      (sec_test_name)
      (indent)
      (sec_test_field
        (sec_test_field_name)
        (sec_test_field_value))
      (sec_test_field
        (sec_test_field_name)
        (sec_test_field_value))
      (sec_test_field
        (sec_test_field_name)
        (sec_test_field_value)
        (indent)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (dedent))
      (sec_test_field
        (sec_test_field_name)
        (sec_test_field_value))
      (sec_test_field
        (sec_test_field_name)
        (sec_test_field_value)
        (indent)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (indented)
        (sec_test_field_value)
        (dedent))
      (sec_test_field
        (sec_test_field_name)
        (sec_test_field_value))
      (dedent)))
  (pkg_sections
    (sec_benchmark
      (sec_bench_name)
      (indent)
      (sec_bench_field
        (sec_bench_field_name)
        (sec_bench_field_value))
      (sec_bench_field
        (sec_bench_field_name)
        (sec_bench_field_value))
      (sec_bench_field
        (sec_bench_field_name)
        (sec_bench_field_value)
        (indent)
        (sec_bench_field_value)
        (indented)
        (sec_bench_field_value)
        (indented)
        (sec_bench_field_value)
        (indented)
        (sec_bench_field_value)
        (indented)
        (sec_bench_field_value)
        (indented)
        (sec_bench_field_value)
        (indented)
        (sec_bench_field_value)
        (indented)
        (sec_bench_field_value)
        (indented)
        (sec_bench_field_value)
        (indented)
        (sec_bench_field_value)
        (dedent))
      (sec_bench_field
        (sec_bench_field_name)
        (sec_bench_field_value))
      (sec_bench_field
        (sec_bench_field_name)
        (sec_bench_field_value)
        (indent)
        (sec_bench_field_value)
        (indented)
        (sec_bench_field_value)
        (indented)
        (sec_bench_field_value)
        (dedent))
      (sec_bench_field
        (sec_bench_field_name)
        (sec_bench_field_value))
      (dedent))))
